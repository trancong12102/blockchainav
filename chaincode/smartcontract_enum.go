// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package main

import (
	"errors"
	"fmt"
)

const (
	// AssetTypePDF is a AssetType of type PDF.
	AssetTypePDF AssetType = iota
	// AssetTypePE is a AssetType of type PE.
	AssetTypePE
)

var ErrInvalidAssetType = errors.New("not a valid AssetType")

const _AssetTypeName = "PDFPE"

var _AssetTypeMap = map[AssetType]string{
	AssetTypePDF: _AssetTypeName[0:3],
	AssetTypePE:  _AssetTypeName[3:5],
}

// String implements the Stringer interface.
func (x AssetType) String() string {
	if str, ok := _AssetTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("AssetType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AssetType) IsValid() bool {
	_, ok := _AssetTypeMap[x]
	return ok
}

var _AssetTypeValue = map[string]AssetType{
	_AssetTypeName[0:3]: AssetTypePDF,
	_AssetTypeName[3:5]: AssetTypePE,
}

// ParseAssetType attempts to convert a string to a AssetType.
func ParseAssetType(name string) (AssetType, error) {
	if x, ok := _AssetTypeValue[name]; ok {
		return x, nil
	}
	return AssetType(0), fmt.Errorf("%s is %w", name, ErrInvalidAssetType)
}

// MarshalText implements the text marshaller method.
func (x AssetType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AssetType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseAssetType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
