// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package main

import (
	"errors"
	"fmt"
)

const (
	// AssetTypePDF is a AssetType of type PDF.
	AssetTypePDF AssetType = "PDF"
	// AssetTypePE is a AssetType of type PE.
	AssetTypePE AssetType = "PE"
)

var ErrInvalidAssetType = errors.New("not a valid AssetType")

// String implements the Stringer interface.
func (x AssetType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AssetType) IsValid() bool {
	_, err := ParseAssetType(string(x))
	return err == nil
}

var _AssetTypeValue = map[string]AssetType{
	"PDF": AssetTypePDF,
	"PE":  AssetTypePE,
}

// ParseAssetType attempts to convert a string to a AssetType.
func ParseAssetType(name string) (AssetType, error) {
	if x, ok := _AssetTypeValue[name]; ok {
		return x, nil
	}
	return AssetType(""), fmt.Errorf("%s is %w", name, ErrInvalidAssetType)
}

// MarshalText implements the text marshaller method.
func (x AssetType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AssetType) UnmarshalText(text []byte) error {
	tmp, err := ParseAssetType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
